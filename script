// ==UserScript==
// @name         Ethercraft Dividend Extension
// @namespace    https://github.com/jghowe/EthercraftDividendExtension
// @version      0.4
// @description  Shows dividends owed on ethercraft.io
// @author       jghowe
// @match        ethercraft.io/*
// @grant        none
// @require      https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.18.2/babel.js
// @require      http://code.jquery.com/jquery-3.2.1.min.js
// @require      https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.5.1/bluebird.min.js
// ==/UserScript==

/* eslint comma-dangle: 0 */

// constants
const DECIMALS = 1e18;
const ETH_PRICE_URL = 'https://api.coinmarketcap.com/v1/ticker/ethereum/';
const ITEM_BALANCE_STYLE = 'padding-top: 14px; font-size: 8px; color: dimgray';
const TOTAL_BALANCE_SYTLE = 'padding-top: 5px; color: dimgray';

// helper functions
const add = (a, b) => a + b;
const sum = values => values.reduce(add, 0);
const tap = f => (value) => { f(value); return value; };
const { assign } = Object;

// maninpulate DOM
const getLocationAddress = () => window.location.hash.replace(/.*inventory\//, '') || web3.eth.defaultAccount;
const waitForElement = selector => new Promise((resolve) => {
  const element = $(selector);
  if (element.length) {
    resolve(element);
  } else {
    setTimeout(() => waitForElement(selector).then(resolve), 100);
  }
});
const isInventoryPage = () => /inventory/.test(window.location.hash);

const insertItemBalance = item => waitForElement(`inventory-item[itemid=${item.index}] .wrapper`)
  .then(element => element.append(`<div style="${ITEM_BALANCE_STYLE}">(${item.balance.toFixed(4)})</div>`));

const insertTotalBalance = (balance, ethPrice) => {
  waitForElement('.extInfo')
    .then((element) => {
      element.html(`BALANCE ${balance.toFixed(5)} ETH ($${(balance * ethPrice).toFixed(2)})`);
    });
};

const insertLoading = () => {
  waitForElement('.inventory div div:nth-child(2)')
    .then(element => element
      .after(`<div class="extInfo" style="${TOTAL_BALANCE_SYTLE}">( Loading... )<div>`));
};

const onLocationChange = (callback) => {
  let currentHash = window.location.hash;
  setInterval(() => {
    if (currentHash !== window.location.hash) {
      currentHash = window.location.hash;
      if (isInventoryPage()) {
        callback();
      }
    }
  }, 1e3);
};

// ETH helpers
const getEthPrice = () => new Promise((resolve) => {
  $.get(ETH_PRICE_URL, (data) => {
    resolve(parseFloat(data[0].price_usd));
  });
});

// math helpers
const calcBalanceSinceLastCheck = (
  totalSupply,
  totalSupplyLastCheck,
  dividendRate,
  itemsOwned
) => totalSupply
  .minus(totalSupplyLastCheck)
  .dividedBy(DECIMALS)
  .times(dividendRate)
  .times(itemsOwned)
  .dividedBy(DECIMALS);

const calcBalanceOwed = (
  totalSupply,
  totalSupplyLastCheck,
  dividendRate,
  itemsOwned,
  balanceOwed,
  excessEth
) => calcBalanceSinceLastCheck(totalSupply, totalSupplyLastCheck, dividendRate, itemsOwned)
  .plus(balanceOwed)
  .plus(excessEth)
  .dividedBy(DECIMALS)
  .toNumber();

// balance helpers
const getToken = contractAddress => web3.eth.contract(ERC20).at(contractAddress);
const getEnchantedShop = address => Promise.promisifyAll(web3.eth.contract(Enchanted).at(address));
const getTotalSupply = contractAddress => Promise.fromCallback(callback =>
  getToken(contractAddress).totalSupply(callback));

const getBalanceOwedForItem = (enchantedShop, address) => Promise.join(
  enchantedShop.objectAsync().then(getTotalSupply),
  enchantedShop.latestBalanceCheckAsync(address),
  enchantedShop.itemReturnAsync(),
  enchantedShop.itemsOwnedAsync(address),
  enchantedShop.balanceOwedAsync(address),
  enchantedShop.excessEthAsync(address),
  calcBalanceOwed
);

const getBalanceOwed = item => getBalanceOwedForItem(
  getEnchantedShop(item.address),
  getLocationAddress()
)
  .then(balance => assign({ balance }, item));

const getItemsWithBalance = () => Promise.all(itemDB)
  .map((item, index) => assign({ index }, item))
  .filter(item => item.enchanted)
  .map(getBalanceOwed)
  .filter(item => item.balance);

const insertBalanceInfo = () => Promise.join(
  getItemsWithBalance()
    .map(tap(insertItemBalance))
    .map(item => item.balance)
    .then(sum),
  getEthPrice(),
  insertTotalBalance
);

$(document).ready(() => {
  const doInsert = () => {
    insertLoading();
    insertBalanceInfo();
  };

  // check for navigation away and back to inventory and then recalculate balances
  onLocationChange(doInsert);

  if (isInventoryPage()) {
    doInsert();
  }
});
